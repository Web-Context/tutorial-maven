h1. Maven - Step 3 : Une application Web a tester

Mantenant qe nous avons les bases de réalisation d'un logicel Java, compilé, testé unitairement, , documenté, packagé et publié via Maven, nous pouvons passer à l'étape suivante: appliquer cette recette à une applicaiton Web.

h2. Quelques pré-requis

Afin de monter à bord facilement, il est indispensable d'avoir quelques bases relative  la conception et au fonctionnement d'application web aujourd'hui standard; à savoir, comprendre l'approche dite "orientée REST":http://fr.wikipedia.org/wiki/Representational_State_Transfer, et avoir déjà manipulé un serveur d'application Java web.
L'idéal serait aussi d'avoir quelques notions autour des EJB et autres composants exotiques du monde JavaEE. Nous considererons que ces notions sont connues et sues.

Nous partirons donc sur une approche JavaEE 6, avec un EJB, une persistence en JPA 2.0 et un web service REST.

Le tout dans un serveur d'application JBoss.

Nous choisirons volontairement "JBoss":http://www.jboss.org pour sa facilité d'intégration avec la chaine d'outils de test unitaire gravitant autour de "Arquillian":http://www.arquillian.org. Outil que nous utiliserons en deuxième partie de cet article pour tester certains composants de notre application.

h2. Platforme ? comme les chaussures vous voulez dire ?

Non, par platforme, nous entendons plateforme de développement.

La plateforme de développement est constituée du JDK 1.7 et du serveur JBOSS AS 7.

Sous Linux l'installation de JBoss est assez simple. Référons nous, au besoin, à la "doc en ligne":https://docs.jboss.org/author/display/AS7/Installing+and+starting+JBoss+AS+on+Linux,+Unix+or+Mac+OS+X.

Comme d'habitude, nous installerons jdk via @apt-get@ et serveur dans @/opt/tools/java/servers/jbos/as7@ en respectant les préconisations de l'article "Set a Java Development workstation on Ubuntu":http://mcgivrer.wordpress.com/2012/11/13/set-a-java-development-workstation-on-ubuntu/.

OK, je crois que nous pouvons maintenant nous (re)lancer à la conquète de Maven.

h2. Maven et le chic web

h3. l'éternel JUnit

Si nous testons des composants non liés à la plateforme JavaEE, comme dans notre article précédent, seul "JUnit":http://www.junit.org est necessaire.
Mais dans le cas où nous devons apporter quelques  implementation des spécifications JavaEE, la mise en euvre de test se complique tout de suite.

Nous pouvons arriver à résoudre certains problème lié à JPA via des instanciations sauvages sans profiter de @CDI@ ou de @PersistenceContext@, mais pour les EJB, c'est tout de suite plus chaud. 

Aussi,  nous allons mettre en oeuvre l'outil ultime de test dans le chapitre suivant: *Arquillian*.

h3. Environnement de test

L'environnement de test est aussi le contexte d'exécution de votre code de test unitaire.

bc(java). @FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class UserDAOTest(){
	@PersistenceContext(unitName="restwebapp")
	EntityManager em;
	...
	@Test
	public void test_1_insertUser(){
		User user = new User("prenom","nom","email@domaine.com");
		em.persist(user);
		assertTrue("User has not been saved",user.getId()!=null);
	}
	...
}

afin que notre annotation fonctionne, nous devons fournir un context à notre test unitaire. C'est ce que va nous apporter Arquillian.

Ajoutons donc cette dépendnce maven à notre @pom.xml@:

bc(xml). <!-- 
   Specific dependency management block 
   for arquillian 
-->
<dependencyManagement>
 <dependencies>
  <dependency>
    <groupId>org.jboss.arquillian</groupId>
    <artifactId>arquillian-bom</artifactId>
    <version>1.1.4.Final</version>
    <scope>import</scope>
    <type>pom</type>
  </dependency>
  <dependency>
    <groupId>org.jboss.arquillian.extension</groupId>
    <artifactId>arquillian-drone-bom</artifactId>
    <version>1.3.0.Final</version>
    <type>pom</type>
    <scope>import</scope>
  </dependency>
 </dependencies>
</dependencyManagement>

Il faut alors déclarer les dépendances nécessaires :

bc(xml). <!--
   Arquillian
-->
<dependency>
  <groupId>org.jboss.arquillian.junit</groupId>
  <artifactId>arquillian-junit-container</artifactId>
  <scope>test</scope>
</dependency>

Une fois les dépendances clairement indiquiées, on peut psr à la partie code de notre context de test d'execution. en haut de votre classe JUnit de test, il va falloir indiquer une annotation *@RunWith(Arquillian.class)* permettant de spécifier à Arquillian qu'il faut batir un context pour cette classe de test.

Il faut ensuite créer une méthde donnant les caractéristiques du packaging à construire pour cette classe de test. vous devrez indiquer les classes dépendances et certains fichiers indispensables à l'execution de JavaEE, comme le fichier @beans.xml@, ou le fichier @persistence.xml@ dans notre cas.

Afin de tester une resource de type persistence, il faut créer une archive Java.

bc(java).. @RunWith(Arquillian.class)
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class UserEJBTest {
 
  @PersistenceContext(unitName = "defaultPersistenceUnit")
  private UserDAO users;

  @Deployment
  public static JavaArchive createArchiveAndDeploy() {
	return ShrinkWrap
	   .create(JavaArchive.class)
	   .addClasses(UserEJB.class, User.class)
	   .addAsResource("META-INF/test-persistence.xml",
		  "META-INF/persistence.xml")
	   .addAsManifestResource(EmptyAsset.INSTANCE,
		  "WEB-INF/beans.xml");
  }

  @Test
  public void testFindAll() {
	List<User> list = users.findAll();
	assertTrue("UserEJB does not retrieve any User entity.", 
		list != null && list.size() > 0);
  }
}

h3. Arquillian, le sauveur

h2. Tests Unitaires

TODO


h2. Tests d'integration

TODO

h2. Tests End-2-End

TODO


h3. One step beyond

Un serveur embarqué dans l'application, grâce à Maven, c'est possible !

* JBoss

TODO


* GlassFish

TODO

* TomEE

TODO

* Jetty 

TODO
