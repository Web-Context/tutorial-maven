h1. Maven? kesako ?

Depuis que le monde Java existe, il est continuellement accompagné de nombreux outils. Parmi ceux-ci, on compte les compilateurs (Javac), les générateurs de documentation (Javadoc), etc...

Il existe une autre catégorie d'outils: les outils d'aide à la construction.

Le plus ancien et le plus vénérable était "Ant":http://ant.apache.org/.  Je dis était car il n'est plus trop au goût du jour. En effet, à sa suite sont arrivés bien des concurrents parmi lesquels on peut trouver,  "Maven":http://Maven.apache.org/, "gradle":http://www.gradle.org/ (Gradle, the next automation generation official web site), "sbt":http://www.scala-sbt.org/ (Simple Build Tool, the Scala/Java official web site.) (pour Simple Build Tool), et la liste s'allonge tous les jours.

Celui qui a le plus marqué ces 10 dernières années et qui domine encore le marché de la construction d'application, car utilisé de façon industrielle est Maven.

Maven va au-delà du simple outil de construction, il possède un cycle de vie qui colle à celui de la fabrication d'un logiciel. La simple commande @mvn@ est capable, dans le désordre:

* de compiler,
* de gérer les dépendances de version de composants,
* d'exécuter des tests unitaires(UT),
* des tests  d'intégration (INT),
* et des test End-to-End (E2E).


Elle est même capable de prendre en main la création d'une release, se chargeant de la gestion du numéro de version, de la compilation des dépendances, et du packaging dans le but de la livraison, sous plusieurs formes pilotées qui plus est: JAR, WAR et/ou EAR. Il sera même capable de construire la documentation du code basée sur Javadoc ou même docbook, de construire un site de livraison et même, si vous lui demandez avec les formes,  proposera un packaging en ZIP des sources du projet.

Bref, vous le comprenez, Maven est L'outil du jour pour la construction de logiciel Java.

Même si quelques concurrents arrivent doucement à sa hauteur, comme Gradle, aujourd'hui seul Maven est capable de couvrir une telle gamme de prestations.

h1. Premier shoot à la pom(.xml)

Il est intéressant d'observer de plus près la constitution de ce fichier, il constitue la recette de fabrication de votre application. nous y trouverons les nom, description et version de votre logiciel, mais aussi, ses dépendances avec le monde extérieur, ainsi que la recette de fabrication permettant d'aller du fichier source (*.Java de façon générale) vers le JAR, le WAR ou même l'EAR.

h2. JAR? WAR ? EAR ?

Quels sont ces acronymes barbares ? Quelques rappels s'imposent:

* *JAR* : Java ARchive, c'est le packaging de base de la livraison d'un quelconque logiciel ou partie de logicel basé sur le langage Java. nous pourrons trouver en son sein des classes compilées (.class), des fichiers de resources divers (.xml, .properties, .txt, etc...) et aussi et surtout la classe contenant si besoin le fameux main() pour la lancement de votre programme, dans le cas d'un logiciel autonome. Le JAR peut (et c'est souvent le cas) contenir une API (Application Programming Interface) constituant les points d'entrées d'une librairie apportant nombre de fonctionnalités. Les plus connues dans le monde Java sont log4j, ainsi que les apache-commons.
* *WAR* : Web ARchive: c'est le cran au dessus du JAR, on trouvera comme dans les jar, des classes Java, des ressources, mais aussi et surtout une structure adaptée au service d'applications orientées web. Nous trouverons des répertoires specifique au web tels que WEB-INF/ et META-INF/ contenant eux-mêmes des fichiers de configuration à destination du serveur Java qui sera chargé lors du déploiement de servir l'application sur Internet ou l'intranet d'une entreprise.
* *EAR* Enterprise AR, ce type d'archive est destinée à contenir un ensemble de services ou d'applications qui sont elles-mêmes packagées au format WAR. C'est une commodité de déploiement. Elle contiendra également des informations de contexte destinées au serveur, et permettant de lui expliquer les liens entre les différentes applications et services qu'elle contient.

Pourquoi ce rappel ? Parce que justement, le petit fichier Project Maven, le fameux @pom.xml@, permet de préciser, entre autres, la cible de packaging de votre projet.

La structure du fichier obéit à quelques règles syntaxiques de base. Vous trouverez ci-dessous un modèle de fichier type.

bc(xml).. <project xmlns="http://Maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://Maven.apache.org/POM/4.0.0 http://Maven.apache.org/xsd/Maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>[project_group_id]</groupId>
  <artifactId>[project_articfact_id]</artifactId>
  <version>[project_version: ex. : 0.0.1-SNAPSHOT]</version>

  <packaging>[jar/war/ear/pom]</packaging>

  <name>[project_name]</name>

  <description>[project_description]</description>

</project>

p. Voilà comment se décrit un projet à l'aide de Maven.

En exemple, attaché à cet article, vous trouvez dans ce fichier @pom_sample.xml@ décrivant une application web orientée REST, plus d'informations sur les possibilités d'un "simple pom" au niveau de la description administrative du projet. L'intérêt ne sera que visible lors de la mise en intégration continue (ou construction continue), où les liens vers le repository de sources ou l'outil de suivi des bugs auront tous leurs sens.

Attardons nous sur les principaux champs de ce @pom.xml@:

@[project_group_id]@ et @[project_artifact_id]@ sont les premiers piliers de Maven, ils vont permettre d'identifier clairement votre projet. Dans le cas où ce projet ne serait qu'une partie d'une application impliquant plusieurs composants, l'accompagner du tag de version (@[project_version]@) va permettre une gestion fine des dépendances.

C'est la première mission de Maven.

Un projet réalisé sous Maven, est en fait dénommé un artifact, il possède son propre identifiant, l'artifactId. Ce projet fait obligatoirement partie d'un groupe, cela permettant un classement des composants d'un même projet, ou d'un ensemble de projets. Il est par habitude composé principalement du nom de la société, de l'association, de la fondation ou de l'organisation à l'origine du logiciel. Dans notre cas, nous partirons sur com.webcontext.apps pour tous nos exemples dans la suite de cet article. Le groupe en question sera également identifié par un groupId.

bq(info). *Note*
Le groupId est souvent similaire au nom du package Java de base de votre application. Par exemple si votre application est contenue dans un package de base "com.masociete.monprojet", le groupId pourra être "com.masociete.apps" et l'artifactId "monprojet".

h2. BUILD

La deuxième mission de Maven consiste à assister le développeur dans la construction de l'application. Le premier élément à spécifier serait donc une cible de compilation. 
Implicitement, Maven nécessite la présence d'un JDK afin de pouvoir compiler les sources Java. 
Maven n'apportant pas lui-même ces outils de base. Aussi, vous devez, par Maven, indiquer une cible de version de ce JDK.

Cela se fera grace à un ensemble de plugin de Maven, spécialisés sur certaines missions.

Attardons-nous un peu sur le premier :

|_ Attribut  |_ Valeur                        |
| groupId    | org.apache.Maven.plugins       |
| artifactId | Maven-compiler-plugin          |
| version    | 3.1                            |

Et oui, même les plugins sont gérés et identifiés par Maven.

Déclarons dans le fichier @pom.xml@ que nous souhaitons utiliser un compilateur issu de la version 1.7 de Java:

bc(xml). <build>
  <plugins>
    <plugin>
      <groupId>org.apache.Maven.plugins</groupId>
      <artifactId>Maven-compiler-plugin</artifactId>
      <version>3.1</version>
      <configuration>
        <target>1.7</target>
        <source>1.7</source>
        <encoding>UTF-8</encoding>
      </configuration>
    </plugin>
  </plugins>
</build>

C'est simple, net et précis. L'opération de build doit s'appuyer sur a configuration de compilation indiquant une version 1.7 du JDK pour le compilateur.

Nous spécifions également l'encodage des fichiers, que nous fixons ici à "UTF-8", cela pour des raisons évidentes de compatibilité cross-plateforme.

Maintenant, si nous exécutons notre premier commande Maven via la commande @mvn@, nous pourrons lancer l'une ou l'autre des étapes de construction de notre application, appelées dans le jargon Maven, des goals.

Les deux premiers qui nous intéressent pour le moment sont "@clean@" et "@build@".

* *clean* : permet de nettoyer l'espace de travail de toute ancienne trace de compilation, ce afin de partir sur des bases saines pour la nouvelle compilation. Notons en passant qu'un nouveau répertoire va faire son apparition à l'exécution de cette première commande, @target@. c'est dans ce répertoire que seront construits tous les éléments de notre projet pour préparer plus tard le packaging en JAR, WAR ou EAR.
* *compile* : c'est l'opération de compilation faisant appel au compilateur Java dans la version de compatibilité indiquée (ici 1.7). Javac sera lancé par Maven avec toutes les options nécessaires pour atteindre ce but.

h3. Compilation

Lançons-nous :

bc(console). $ mvn clean
$ mvn compile

Nous avons donc nettoyé et compilé nos sources. Enfin, pour le moment, cela est fictif car nous n'avons pas encore de sources. A ce propos, regardons la structure d'un projet Maven:

bc(diagram). [mon_projet]          # répertoire de base du projet
  |_ src              # sources du projet découpées en deux groupes
  |  |_ main          # les sources à proprement parler du code du projet
  |  |  |_ Java       # - les classes Java dans leurs packages   
  |  |  |_ resources  # - les ressources additionnelles comme les  *.properties, *.xml, ...
  |  |  |_ webapp     # - les fichiers composant les UI (html, css, images, Javascript)
  |  |_ test          # le code des tests unitaires, intégration et E2E.
  |  |  |_ Java       # - les parties Java pour l'exécution de ce tests
  |  |  |_ resources  # - les éventuelles ressources nécessaires (données de test)
  |_ target           # l'espace réservé à la compilation et au packaging
  |_ pom.xml          # le fichier de description du projet Maven. 


Voilà en quelques lignes décrite la structure standard d'un projet Maven.

Il nous reste à créer un premier vrai projet. Je vous propose la réalisation d'un projet Web basé sur une mise en oeuvre de la Technologie REST propre à Java, JAX-RS décrit dans la spécification standard "JSR-311":https://jsr311.Java.net/ (Spécification officiel JSR-311 de la technologie Java RESTful).

Mais en premier lieu, il nous faudra comprendre le fonctionnement de base sur un projet simple, à base de JAR.

La suite au prochain numéro.

_To be continued... (comme disent nos amis outre-atlantique)_
